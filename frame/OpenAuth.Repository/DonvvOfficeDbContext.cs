//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using _OpenAuth.Repository.Domain.DonvvOffice;
using OpenAuth.Repository.Domain;
using OpenAuth.Repository.Domain.DonvvOffice;
using OpenAuth.Repository.Mapping;
using OpenAuth.Repository.Mapping.DonvvOffice;

namespace OpenAuth.Repository
{
    public partial class DonvvOfficeDbContext : DbContext
    {
        static DonvvOfficeDbContext()
        {  

            //从不创建数据库
            Database.SetInitializer<DonvvOfficeDbContext>(null);
        }

        public DonvvOfficeDbContext()
            : base("Name=DonvvOfficeDbContext")
        {
            // 关闭语义可空判断
            Configuration.UseDatabaseNullSemantics = true;

            //与变量的值为null比较
            //ef判断为null的时候，不能用变量比较：https://stackoverflow.com/questions/682429/how-can-i-query-for-null-values-in-entity-framework?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
            (this as IObjectContextAdapter).ObjectContext.ContextOptions.UseCSharpNullComparisonBehavior = true;
            Database.Log = s => System.Diagnostics.Debug.WriteLine(s);
        }

        public DonvvOfficeDbContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        { 
        
        } 

        protected override void OnModelCreating(DbModelBuilder builder)
        {
            #region 配置的Map           
            builder.Configurations.Add(new T_Dic_TypeItemMap());
            builder.Configurations.Add(new T_Dic_TypeMainMap());
            builder.Configurations.Add(new T_FeedBack_InfoMap());
            builder.Configurations.Add(new T_Information_AttachMap());
            builder.Configurations.Add(new T_Information_CommentInfoMap());
            builder.Configurations.Add(new T_Information_InfoMap());
            builder.Configurations.Add(new T_Information_SharesMap());
            builder.Configurations.Add(new T_Level_InfoMap());
            builder.Configurations.Add(new T_Needs_AttachMap());
            builder.Configurations.Add(new T_Needs_CommentInfoMap());
            builder.Configurations.Add(new T_Needs_InfoMap());
            builder.Configurations.Add(new T_Notice_UsersMap());
            builder.Configurations.Add(new T_Operation_DetailMap());
            builder.Configurations.Add(new T_Operation_TypeMap());
            builder.Configurations.Add(new T_User_CompanyAuthMap());
            builder.Configurations.Add(new T_User_FriendMsgMap());
            builder.Configurations.Add(new T_User_FriendsMap());

            builder.Configurations.Add(new T_User_InfoMap());
            builder.Configurations.Add(new T_User_OrderInfoMap());
            builder.Configurations.Add(new T_Company_InfoMap());

            builder.Configurations.Add(new T_User_CollectMap());
            builder.Configurations.Add(new T_Information_TitleImgMap());
            #endregion
            base.OnModelCreating(builder);
            base.OnModelCreating(builder);
        }

        #region DbSet
        
       
        public virtual DbSet<T_Dic_TypeItem> T_Dic_TypeItems { get; set; }
        public virtual DbSet<T_User_Info> T_User_Infos { get; set; }



        public virtual DbSet<T_Dic_TypeMain> T_Dic_TypeMains { get; set; }
        public virtual DbSet<T_FeedBack_Info> T_FeedBack_Infos { get; set; }
        public virtual DbSet<T_Information_Attach> T_Information_Attachs { get; set; }


        public virtual DbSet<T_Information_CommentInfo> T_Information_CommentInfos { get; set; }
        public virtual DbSet<T_Information_Info> T_Information_Infos { get; set; }
        public virtual DbSet<T_Information_Shares> T_Information_Shares { get; set; }


        public virtual DbSet<T_Level_Info> T_Level_Infos { get; set; }
        public virtual DbSet<T_Needs_Attach> T_Needs_Attachs { get; set; }
        public virtual DbSet<T_Needs_CommentInfo> T_Needs_CommentInfos { get; set; }



        public virtual DbSet<T_Needs_Info> T_Needs_Infos { get; set; }
        public virtual DbSet<T_Needs_Shares> T_Needs_Shares { get; set; }
        public virtual DbSet<T_Notice_Info> T_Notice_Infos { get; set; }

        public virtual DbSet<T_Notice_Users> T_Notice_Users { get; set; }
        public virtual DbSet<T_Operation_Detail> T_Operation_Details { get; set; }
        public virtual DbSet<T_Operation_Type> T_Operation_Types { get; set; }


        public virtual DbSet<T_User_CompanyAuth> T_User_CompanyAuths { get; set; }
        public virtual DbSet<T_User_FriendMsg> T_User_FriendMsgs { get; set; }
        public virtual DbSet<T_User_Friends> T_User_Friends { get; set; }
        public virtual DbSet<T_User_OrderInfo> T_User_OrderInfos { get; set; }

        public virtual DbSet<T_Company_Info> T_Company_Infos { get; set; }


        public virtual DbSet<T_User_Collect> T_User_Collects { get; set; }


        public virtual DbSet<T_Information_TitleImg> T_Information_TitleImgs { get; set; }

        #endregion 
    }
}